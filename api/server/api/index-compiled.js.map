{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;kBAKe,YAAW;AACzB,KAAM,MAAM,sBAAN,CADmB;AAEzB,KAAM,WAAW,mDAAX;;;;AAFmB,IAMzB,CAAI,GAAJ,CAAQ,SAAR;;;;AANyB,IAUzB,CAAI,GAAJ,CAAQ,SAAR,EAAmB,UAAC,GAAD,EAAM,GAAN,EAAc;;AAEhC,MAAI,QAAQ,wBAAU,QAAV,CAAR;;;AAF4B,OAKhC,CAAM,GAAN,CAAU,cAAV,EAA0B,UAAU,GAAV,EAAe,QAAf,EAAyB;AAClD,WAAQ,GAAR,CAAY,mBAAZ,EAAiC,SAAS,QAAT,CAAjC,CADkD;AAElD,OAAI,CAAC,SAAS,EAAT,IAAe,CAAC,iBAAE,OAAF,CAAU,GAAV,CAAD,EAAgB;AACnC,WAAO,EAAC,KAAK,MAAL,EAAR,CADmC;IAApC;;AAIA,OAAM,iBAAiB,iBAAE,MAAF,CAAS,SAAS,QAAT,EAAmB,UAAC,IAAD,EAAO,OAAP,EAAmB;AACrE,QAAI,CAAC,QAAQ,WAAR,EAAqB;AACzB,aAAQ,QAAQ,YAAR,CADiB;AAEzB,YAAO,IAAP,CAFyB;KAA1B;IADkD,EAKhD,CALoB,CAAjB,CAN4C;;AAalD,OAAM,eAAe,iBAAE,MAAF,CAAS,SAAS,QAAT,EAAmB,UAAC,IAAD,EAAO,KAAP,EAAiB;AACjE,QAAI,CAAC,MAAM,WAAN,EAAmB;AACvB,aAAQ,MAAM,YAAN,CADe;AAEvB,YAAO,IAAP,CAFuB;KAAxB;IADgD,EAK9C,CALkB,CAAf,CAb4C;;AAoBlD,OAAM,YAAY,iBAAE,MAAF,CAAS,SAAS,QAAT,EAAmB,UAAC,IAAD,EAAO,EAAP,EAAc;AAC3D,YAAQ,GAAG,QAAH,CADmD;AAE3D,WAAO,IAAP,CAF2D;IAAd,EAG3C,CAHe,CAAZ;;;;AApB4C,MA4BlD,CAAI,IAAJ,CAAS;AACR,cAAU,SAAS,QAAT;AACV,YAAQ,SAAS,MAAT;AACR,SAAK,SAAS,GAAT;IAHN,EA5BkD;GAAzB,CAA1B,CALgC;EAAd,CAAnB,CAVyB;;AAmDzB,QAAO,GAAP,CAnDyB;CAAX;;AALf;;AACA;;;;AACA;;;;AACA","file":"index-compiled.js","sourcesContent":["import { Router } from 'express';\nimport facets from './facets';\nimport Slack from 'slack-node';\nimport _ from 'lodash';\n\nexport default function() {\n\tconst api = Router();\n\tconst apiToken = 'xoxp-2165302478-2615484651-32016104352-dd2118e986';//xoxp-2165302478-2615484651-10996742980-55f05d6e5f\n\n\t// mount the facets resource\n\t//api/facets/0\n\tapi.use('/facets', facets);\n\n\t// perhaps expose some API metadata at the root\n\t//api/users\n\tapi.get('/unread', (req, res) => {\n\n\t\tlet slack = new Slack(apiToken);\n\n\t\t//slack.api(\"users.counts\" == good\n\t\tslack.api('users.counts', function (err, response) {\n\t\t\tconsole.log('response.channels', response.channels);\n\t\t\tif (!response.ok || !_.isEmpty(err)){\n\t\t\t\treturn {msg: 'fail'};\n\t\t\t}\n\n\t\t\tconst channelsUnread = _.reduce(response.channels, (seed, channel) => {\n\t\t\t\tif (!channel.is_archived) {\n\t\t\t\t\tseed += channel.unread_count;\n\t\t\t\t\treturn seed\n\t\t\t\t}\n\t\t\t}, 0);\n\n\t\t\tconst groupsUnread = _.reduce(response.channels, (seed, group) => {\n\t\t\t\tif (!group.is_archived) {\n\t\t\t\t\tseed += group.unread_count;\n\t\t\t\t\treturn seed\n\t\t\t\t}\n\t\t\t}, 0);\n\n\t\t\tconst imsUnread = _.reduce(response.channels, (seed, im) => {\n\t\t\t\tseed += im.dm_count;\n\t\t\t\treturn seed\n\t\t\t}, 0);\n\n\t\t//\tconsole.log('channelsUnread, groupsUnread, imsUnread', channelsUnread, groupsUnread, imsUnread);\n\n\n\t\t\tres.json({\n\t\t\t\tchannels: response.channels,\n\t\t\t\tgroups: response.groups,\n\t\t\t\tims: response.ims\n\t\t\t});\n\t\t});\n\t});\n\n\treturn api;\n}\n"]}